// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: s3/s3.proto

package s3v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Endpoint_RegisterBucket_FullMethodName     = "/s3.Endpoint/RegisterBucket"
	Endpoint_HasBucket_FullMethodName          = "/s3.Endpoint/HasBucket"
	Endpoint_UnregisterBucket_FullMethodName   = "/s3.Endpoint/UnregisterBucket"
	Endpoint_GetAllBuckets_FullMethodName      = "/s3.Endpoint/GetAllBuckets"
	Endpoint_CreateImage_FullMethodName        = "/s3.Endpoint/CreateImage"
	Endpoint_GetImage_FullMethodName           = "/s3.Endpoint/GetImage"
	Endpoint_GetImageWithBucket_FullMethodName = "/s3.Endpoint/GetImageWithBucket"
	Endpoint_DeleteImage_FullMethodName        = "/s3.Endpoint/DeleteImage"
	Endpoint_GetAllImages_FullMethodName       = "/s3.Endpoint/GetAllImages"
	Endpoint_GetImagesInBucket_FullMethodName  = "/s3.Endpoint/GetImagesInBucket"
)

// EndpointClient is the client API for Endpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndpointClient interface {
	RegisterBucket(ctx context.Context, in *RegisterBucketRequest, opts ...grpc.CallOption) (*RegisterBucketResponse, error)
	HasBucket(ctx context.Context, in *HasBucketRequest, opts ...grpc.CallOption) (*HasBucketResponse, error)
	UnregisterBucket(ctx context.Context, in *UnregisterBucketRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	GetAllBuckets(ctx context.Context, in *GetAllBucketsRequest, opts ...grpc.CallOption) (*GetAllBucketsResponse, error)
	CreateImage(ctx context.Context, in *CreateImageRequest, opts ...grpc.CallOption) (*CreateImageResponse, error)
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error)
	GetImageWithBucket(ctx context.Context, in *GetImageWithBucketRequest, opts ...grpc.CallOption) (*GetImageWithBucketResponse, error)
	DeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	GetAllImages(ctx context.Context, in *GetAllImagesRequest, opts ...grpc.CallOption) (*GetAllImagesResponse, error)
	GetImagesInBucket(ctx context.Context, in *GetImagesInBucketRequest, opts ...grpc.CallOption) (*GetImagesInBucketResponse, error)
}

type endpointClient struct {
	cc grpc.ClientConnInterface
}

func NewEndpointClient(cc grpc.ClientConnInterface) EndpointClient {
	return &endpointClient{cc}
}

func (c *endpointClient) RegisterBucket(ctx context.Context, in *RegisterBucketRequest, opts ...grpc.CallOption) (*RegisterBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterBucketResponse)
	err := c.cc.Invoke(ctx, Endpoint_RegisterBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) HasBucket(ctx context.Context, in *HasBucketRequest, opts ...grpc.CallOption) (*HasBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasBucketResponse)
	err := c.cc.Invoke(ctx, Endpoint_HasBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) UnregisterBucket(ctx context.Context, in *UnregisterBucketRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, Endpoint_UnregisterBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) GetAllBuckets(ctx context.Context, in *GetAllBucketsRequest, opts ...grpc.CallOption) (*GetAllBucketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllBucketsResponse)
	err := c.cc.Invoke(ctx, Endpoint_GetAllBuckets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) CreateImage(ctx context.Context, in *CreateImageRequest, opts ...grpc.CallOption) (*CreateImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateImageResponse)
	err := c.cc.Invoke(ctx, Endpoint_CreateImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImageResponse)
	err := c.cc.Invoke(ctx, Endpoint_GetImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) GetImageWithBucket(ctx context.Context, in *GetImageWithBucketRequest, opts ...grpc.CallOption) (*GetImageWithBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImageWithBucketResponse)
	err := c.cc.Invoke(ctx, Endpoint_GetImageWithBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) DeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, Endpoint_DeleteImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) GetAllImages(ctx context.Context, in *GetAllImagesRequest, opts ...grpc.CallOption) (*GetAllImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllImagesResponse)
	err := c.cc.Invoke(ctx, Endpoint_GetAllImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) GetImagesInBucket(ctx context.Context, in *GetImagesInBucketRequest, opts ...grpc.CallOption) (*GetImagesInBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImagesInBucketResponse)
	err := c.cc.Invoke(ctx, Endpoint_GetImagesInBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndpointServer is the server API for Endpoint service.
// All implementations must embed UnimplementedEndpointServer
// for forward compatibility.
type EndpointServer interface {
	RegisterBucket(context.Context, *RegisterBucketRequest) (*RegisterBucketResponse, error)
	HasBucket(context.Context, *HasBucketRequest) (*HasBucketResponse, error)
	UnregisterBucket(context.Context, *UnregisterBucketRequest) (*CommonResponse, error)
	GetAllBuckets(context.Context, *GetAllBucketsRequest) (*GetAllBucketsResponse, error)
	CreateImage(context.Context, *CreateImageRequest) (*CreateImageResponse, error)
	GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error)
	GetImageWithBucket(context.Context, *GetImageWithBucketRequest) (*GetImageWithBucketResponse, error)
	DeleteImage(context.Context, *DeleteImageRequest) (*CommonResponse, error)
	GetAllImages(context.Context, *GetAllImagesRequest) (*GetAllImagesResponse, error)
	GetImagesInBucket(context.Context, *GetImagesInBucketRequest) (*GetImagesInBucketResponse, error)
	mustEmbedUnimplementedEndpointServer()
}

// UnimplementedEndpointServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEndpointServer struct{}

func (UnimplementedEndpointServer) RegisterBucket(context.Context, *RegisterBucketRequest) (*RegisterBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBucket not implemented")
}
func (UnimplementedEndpointServer) HasBucket(context.Context, *HasBucketRequest) (*HasBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasBucket not implemented")
}
func (UnimplementedEndpointServer) UnregisterBucket(context.Context, *UnregisterBucketRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterBucket not implemented")
}
func (UnimplementedEndpointServer) GetAllBuckets(context.Context, *GetAllBucketsRequest) (*GetAllBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBuckets not implemented")
}
func (UnimplementedEndpointServer) CreateImage(context.Context, *CreateImageRequest) (*CreateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImage not implemented")
}
func (UnimplementedEndpointServer) GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedEndpointServer) GetImageWithBucket(context.Context, *GetImageWithBucketRequest) (*GetImageWithBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageWithBucket not implemented")
}
func (UnimplementedEndpointServer) DeleteImage(context.Context, *DeleteImageRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (UnimplementedEndpointServer) GetAllImages(context.Context, *GetAllImagesRequest) (*GetAllImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllImages not implemented")
}
func (UnimplementedEndpointServer) GetImagesInBucket(context.Context, *GetImagesInBucketRequest) (*GetImagesInBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImagesInBucket not implemented")
}
func (UnimplementedEndpointServer) mustEmbedUnimplementedEndpointServer() {}
func (UnimplementedEndpointServer) testEmbeddedByValue()                  {}

// UnsafeEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndpointServer will
// result in compilation errors.
type UnsafeEndpointServer interface {
	mustEmbedUnimplementedEndpointServer()
}

func RegisterEndpointServer(s grpc.ServiceRegistrar, srv EndpointServer) {
	// If the following call pancis, it indicates UnimplementedEndpointServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Endpoint_ServiceDesc, srv)
}

func _Endpoint_RegisterBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).RegisterBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Endpoint_RegisterBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).RegisterBucket(ctx, req.(*RegisterBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_HasBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).HasBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Endpoint_HasBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).HasBucket(ctx, req.(*HasBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_UnregisterBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).UnregisterBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Endpoint_UnregisterBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).UnregisterBucket(ctx, req.(*UnregisterBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_GetAllBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).GetAllBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Endpoint_GetAllBuckets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).GetAllBuckets(ctx, req.(*GetAllBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_CreateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).CreateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Endpoint_CreateImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).CreateImage(ctx, req.(*CreateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Endpoint_GetImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).GetImage(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_GetImageWithBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageWithBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).GetImageWithBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Endpoint_GetImageWithBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).GetImageWithBucket(ctx, req.(*GetImageWithBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Endpoint_DeleteImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).DeleteImage(ctx, req.(*DeleteImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_GetAllImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).GetAllImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Endpoint_GetAllImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).GetAllImages(ctx, req.(*GetAllImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_GetImagesInBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImagesInBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).GetImagesInBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Endpoint_GetImagesInBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).GetImagesInBucket(ctx, req.(*GetImagesInBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Endpoint_ServiceDesc is the grpc.ServiceDesc for Endpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Endpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "s3.Endpoint",
	HandlerType: (*EndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterBucket",
			Handler:    _Endpoint_RegisterBucket_Handler,
		},
		{
			MethodName: "HasBucket",
			Handler:    _Endpoint_HasBucket_Handler,
		},
		{
			MethodName: "UnregisterBucket",
			Handler:    _Endpoint_UnregisterBucket_Handler,
		},
		{
			MethodName: "GetAllBuckets",
			Handler:    _Endpoint_GetAllBuckets_Handler,
		},
		{
			MethodName: "CreateImage",
			Handler:    _Endpoint_CreateImage_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _Endpoint_GetImage_Handler,
		},
		{
			MethodName: "GetImageWithBucket",
			Handler:    _Endpoint_GetImageWithBucket_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _Endpoint_DeleteImage_Handler,
		},
		{
			MethodName: "GetAllImages",
			Handler:    _Endpoint_GetAllImages_Handler,
		},
		{
			MethodName: "GetImagesInBucket",
			Handler:    _Endpoint_GetImagesInBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s3/s3.proto",
}
